
#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>

Adafruit_PWMServoDriver servo_driver = Adafruit_PWMServoDriver();


// Declare each servo
{% for tabName in list_of_names %}int {{tabName}};
{% endfor %}
// Array of servos, useful to iterate over
int SERVO_ARR[] = { {% for tabName in list_of_names %}{{tabName}}, {% endfor %}};

// Calculate number of servos
byte NUM_SERVOS = sizeof(SERVO_ARR) / sizeof(int);

// Time 'delay' between each servo position update
const unsigned long INTERVAL = {{interval}};


// Initialize servo position (value) arrays for each servo
// These are the recorded routines
{% for tabName, array in zip(list_of_names,tweenerArrays) %}
const byte {{tabName}}_arr[]PROGMEM = 
{
{{array}}
};
{% endfor %}
// Calculate length of value array (how long the routine is)
const unsigned int ARRAY_LENGTH = sizeof({{list_of_names[0]}}_arr) / sizeof(byte);

// Array of position(value) arrays, useful to iterate over 
const byte* VALUES_ARRAY[] = { {% for tabName in list_of_names %}{{tabName}}_arr, {% endfor %}};

{% if button != 'None' %}
// Button to start routine
const byte BUTTON_PIN = {{button}};

int state = 0;
unsigned long time_check = 0;
unsigned long time_start = 0;
const int bounce_delay = 20;
const int timeout_delay = 1000;

void debounceButton()
{
  boolean button_val = digitalRead(BUTTON_PIN);

  //State Machine Section
  switch ( state )
  {
    case 0: // WAIT
      // Wait for the switch to go low
      if ( button_val == LOW )
      {
        time_start = millis();
        state = 1;
      }
      break;

    case 1: // ARMED
      // Check to see if the proper has delay has passed.  If a bounce occures reset
      time_check = millis();
      
      // Reset if button bounces back high
      if ( button_val == HIGH )
      {
        state = 0;
      }
      else if ( time_check - time_start > bounce_delay )
      {
        state = 2;
      }
      break;

    case 2:
      time_check = millis();
      // If switch is HIGH button was pushed and released
      if ( button_val == HIGH )
      {
        state = 3;
      }
      // Long press 
      else if ( time_check - time_start > timeout_delay )
      {
        Serial.println( "long press" );
        state = 4; 
      }
      break;

    case 3:
      // Do something and reset the State Machine
      
      // Something
      Serial.println(F("Routine Started"));
      routine(SERVO_ARR, NUM_SERVOS, VALUES_ARRAY, INTERVAL, ARRAY_LENGTH);
      Serial.println(F("Exiting routine"));

      state = 0;
      break;
     
    case 4:
      // Button held low too long
      // Wait for it to go back high, then reset
      if ( button_val == HIGH )
      {
       state = 0; 
      }
  } 
}{% endif %}

//================================
const int SERVOMIN = 150;
const int SERVOMAX = 585;

//================================
void routine(int arr_of_servos[], byte num_of_servos, const byte* arr_of_valueArrays[], byte interval, unsigned int length)
{
  /*
    Updates positions of all servos concurrently for entirety of the
    routine length (all values in value arrays
  */

  unsigned long start_millis = millis();
  boolean routine_running = true;
  unsigned long pos = 0;
  unsigned long end_millis;
  
  Serial.println(F("Inside the routine"));
  
  while (routine_running)
  {
    // These need to be long type for arithmetic and comparison to work properly
    unsigned long elapsed_time = (millis() - start_millis);
    unsigned long compare_to = (interval * pos);
    
    if (elapsed_time > compare_to)
    {
      for (byte i=0; i<num_of_servos; i++)
      {
        byte temp_byte = pgm_read_byte(&arr_of_valueArrays[i][pos]);
        int value = map(temp_byte, 0, 179, SERVOMIN, SERVOMAX);
        
        servo_driver.setPin(i, value);
      }
      pos++;
    }
  
    if (pos >= length)
    {
      routine_running = false;
      end_millis = millis();
    }
  }

  // Add delay at end of routine
  unsigned long start_delay = millis();
  while ((millis() - start_delay) < 3000)
  {
  }

  // Reset servos to initial position
  for (byte i=0; i<num_of_servos; i++)
  {
    byte temp_byte = pgm_read_byte(&arr_of_valueArrays[i][0]);
    int value = map(temp_byte, 0, 179, SERVOMIN, SERVOMAX);
    servo_driver.setPin(i, value);
  }

  Serial.println(F("Routine has ended"));
}

//================================

void setup() {

  Serial.begin(9600);
  Serial.println(F("Hello from the Microcontroller i2c template"));
  Serial.print("array length: ");
  Serial.println(ARRAY_LENGTH);

{% if button != 'None' %}
  pinMode(BUTTON_PIN, INPUT_PULLUP); {% endif %}

  servo_driver.begin();
  servo_driver.setPWMFreq(50);

  for (byte i=0; i<NUM_SERVOS; i++)
  // Set all servos to starting position
  {
    byte temp_byte = pgm_read_byte(&VALUES_ARRAY[i][0]);
    int value = map(temp_byte, 0, 179, SERVOMIN, SERVOMAX);
    servo_driver.setPin(i, value);
  }

  long now = millis();  // Add delay before loop starts
  while ((millis() - now) < 2000)
  {
  }

  Serial.println(F("Now entering main loop..."));
}


void loop() {% if button != 'None' %}
{
  // Button press starts servo routine
  debounceButton();

{% else %}{
  // Do something with routine function:
    // routine(SERVO_ARR, NUM_SERVOS, VALUES_ARRAY, INTERVAL, ARRAY_LENGTH);
{% endif %}
}


